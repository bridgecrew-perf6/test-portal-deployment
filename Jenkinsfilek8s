pipeline {
    agent {
        kubernetes {
            label 'test-portal-deployment'
			defaultContainer 'xc8-mplabx'
            yamlFile 'cloudprovider.yml'
        }
    }

    parameters {
        string( name: 'NOTIFICATION_EMAIL',
                defaultValue: 'dinesh.baria@microchip.com',
                description: "Email to send build failure and fixed notifications.")
    }
	
	environment {	
		GITHUB_URL ='https://github.com/mchpTestArea/test-portal-deployment'
		BITBUCKET_URL = 'https://bitbucket.microchip.com/scm/~i15784/test-portal-deployment.git'
		DEPLOY_TOOL_URL = 'https://bitbucket.microchip.com/scm/citd/tool-github-deploy.git'
		DEPLOY_SCRIPT_DIR = 'tool-github-deploy'
		DEPLOY_SCRIPT_FILE = 'deploy-source-as-is.sh'
		SEMVER_REGEX = '^(0|[1-9]\\d*)+\\.(0|[1-9]\\d*)+\\.(0|[1-9]\\d*)+$'
		ARTIFACTORY_SERVER = 'https://artifacts.microchip.com:7999/artifactory'
	}
	
    options {
        timestamps()
        timeout(time: 20, unit: 'MINUTES')
    }

    stages {
        stage('Checkout') {
            steps {
				checkout scm
            }
        }
		
        stage('metadata') {
            steps {
				script {
					execute("pip install jsonschema")
					download("metadata-schema","1.1.0")	
					download("tool-metadata-validator","1.0.0")					
									
					execute("cd tool-metadata-validator && python metadata-validator.py -data '../.main-meta/main.json' -schema '../metadata-schema/main-schema.json'")
					
					def jsonObj = readJSON file:".main-meta/main.json"					
					def githubObj = getGiHubInfo()
					
					if(githubObj.repoName != jsonObj.content.projectName) {
						execute("echo 'Project name in metadata file does not match with GitHub repository name.' && exit 1")						
					}
					
					if(env.TAG_NAME =~ env.SEMVER_REGEX) {
						if(env.TAG_NAME != jsonObj.content.version) {
							execute("echo 'Version in metadata file does not match with TAG_NAME.' && exit 1") 
						}
					}					
				}
            }
        }	
		
        stage('GitHub-Deploy') {
			when {
				not { 
					changeRequest() 
				}
				anyOf {
					tag ''
				}
            }
			steps {
				script {			
                	def githubObj = getGiHubInfo()
					download("tool-github-deploy","1.4.0")		
					execute("chmod +x ./tool-github-deploy/tool-github-deploy/tool-github-deploy.py") 
					withCredentials([usernamePassword(credentialsId: 'BD1085_GitHub_Token', usernameVariable: 'USER_NAME', passwordVariable:'USER_PASS' )]) {				
                        execute("python ./tool-github-deploy/tool-github-deploy/tool-github-deploy.py -deploy=true -gpat=${USER_PASS} -dgid=${USER_NAME} -dburl=${env.BITBUCKET_URL} -dgurl=${env.GITHUB_URL} -dtag=${env.TAG_NAME} -dmfd=true -digmc=true")						
						execute("python ./tool-github-deploy/tool-github-deploy/tool-github-deploy.py -rlo=true -gpat=${USER_PASS}  -rpn=${githubObj.repoName} -rltv=${env.TAG_NAME} -rltt=${env.TAG_NAME}")
					}	
                    sendSuccessfulGithubDeploymentEmail()					
				}
			}
        }	
		stage('Portal-Deploy') {
			when {
				not { 
					changeRequest() 
				}			
				tag ''
			}
			steps {
				script {
					def metadata = readJSON file:".main-meta/main.json"		
					def githubObj = getGiHubInfo()		
					def owner = githubObj.ownerName
					def version = metadata.content.version
					def project = metadata.content.projectName
			
					def cmdArgs = "'{\"repoOwnerName\":\"$owner\",\"repoName\":\"$project\",\"tagName\":\"$version\"}'"
					cmdArgs = cmdArgs.replaceAll("\"","\\\\\"")						
					
					execute("git clone https://bitbucket.microchip.com/scm/portal/bundles.git")
					execute("cd bundles && chmod 755 ./portal-client-cli-linux")
						
					execute("git clone https://bitbucket.microchip.com/scm/citd/tool-portal-client-launcher.git")					
					execute("cd tool-portal-client-launcher && node portalLauncher.js -app=../bundles/portal-client-cli-linux - -srv=\"staging\" -cmd=\"uploadGitHub ${cmdArgs}\"")
				}
			}
		}
	}

    post {
        failure {			
            script {			
				sendPipelineFailureEmail()
            }
        }
    }
}

def execute(String cmd) {
	if(isUnix()) {
		sh cmd
	} else {
		bat cmd
	}
}

def getGiHubInfo()
{
	def githubObj = [
		'ownerName':'',
		'repoName':''
		]
	String[] splitURLString = "${env.GITHUB_URL}".split("/")
	githubObj.repoName = splitURLString[splitURLString.size()-1]
	githubObj.repoName = githubObj.repoName.replace(".git","")
	githubObj.ownerName = splitURLString[splitURLString.size()-2]
	return githubObj
}

def download(String toolName,String toolVersion) {
	def repo = "ivy/citd"
	def url = "${env.ARTIFACTORY_SERVER}/${repo}/${toolName}/${toolVersion}/${toolName}-${toolVersion}.zip"
	def response =sh(script:"curl ${url} -o ${toolName}.zip",returnStdout: true).trim()
	unzip dir:"${toolName}", quiet: true, zipFile: "${toolName}.zip"	
	execute("rm -rf ${toolName}.zip")
}

def sendPipelineFailureEmail () {
    if (!"${env.CHANGE_AUTHOR_EMAIL}".equalsIgnoreCase("null")) {		  
        mail to: "${env.CHANGE_AUTHOR_EMAIL}, ${params.NOTIFICATION_EMAIL}",
        subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
        body: "Pipeline failure. ${env.BUILD_URL}"
    } else {			  
        mail to: "${params.NOTIFICATION_EMAIL}",
        subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
        body: "Pipeline failure. ${env.BUILD_URL}"
    }
}

def sendSuccessfulGithubDeploymentEmail () {
    mail to: "${params.NOTIFICATION_EMAIL}",
    subject: "Successful Deployment: ${currentBuild.fullDisplayName}",
    body: "The changes have been successfully deployed to GitHub. ${env.GITHUB_URL}"
}
